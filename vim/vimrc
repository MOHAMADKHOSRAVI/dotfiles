" Install vim-plug(Plugin Manager) => https://github.com/junegunn/vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Put plugin here
" Actually doing something
Plug 'tpope/vim-fugitive'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } } " Markdown Preview
Plug 'pseewald/vim-anyfold' " Language agnostic plugin for folding and motion based on indentation
Plug 'vim-scripts/indentpython.vim', {'for': 'python'}
Plug 'skywind3000/asyncrun.vim', {'for': ['python', 'javascript']} "For run command
Plug 'mitsuhiko/vim-jinja' " For jinja templating engine
Plug 'scrooloose/nerdtree' " NERDTree
Plug 'christoomey/vim-sort-motion' "For sorting import alphabetically
Plug 'tpope/vim-repeat' "Add repeatablity to plugins whom use it
Plug 'tpope/vim-surround' "Add surround verb to vim
Plug 'tpope/vim-commentary' "Comment Things out.
" Tmux and Vim navigation lives in harmony also need to change tmux config,
Plug 'christoomey/vim-tmux-navigator'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sheerun/vim-polyglot' " Syntax Highlighting
Plug 'drewtempelmeyer/palenight.vim' " Color Scheme
Plug 'Xuyuanp/nerdtree-git-plugin' " Show git status flag
Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " Sexy NERDTree icon.
Plug 'ryanoasis/vim-devicons' " Always be last one. Use for show sexy icon.
Plug 'unblevable/quick-scope' "Highlight character that get you to a word horizontally
Plug 'junegunn/rainbow_parentheses.vim' "Match color for matching [], {}, ()

" End
" Initialize plugin system
call plug#end()

" Reload .vimrc and :PlugInstall to install plugins.

set nocompatible " Be Vi Improved
filetype on
filetype plugin on
filetype indent on
syntax on 
set t_Co=24 " Set truecolor
set showcmd " Show command that you type
" Hybrid number and Automatic toggling between line number modes
" When enter insert mode or buffer lose focus show absolute number
" Other time shows hybrid numbers.
:set number relativenumber

:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

" Control the position of the new window
:set splitbelow
:set splitright

" Move around split with CTRL + standard VIM movment key
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Change the leader from \ to ,
let mapleader="\,"

" For folding plugin
autocmd Filetype * AnyFoldActivate               " activate for all filetypes
set foldlevel=99 " Open all folds
hi Folded term=underline
let g:anyfold_identify_comments=2

" Enable folding with the space
nnoremap <Space> za

" Enable syntax highlighting for python(with polygot)
let g:python_highlight_all = 1

" Set encoding to UTF-8
set encoding=utf-8

" === Search === "
" ignore case when searching
set ignorecase

" if the search string has an upper case letter in it, the search will be case sensitive
set smartcase

" Automatically re-read file if a change was detected outside of vim
set autoread

" Yank and paste with the system clipboard
set clipboard=unnamed

" Hides buffers instead of closing them
set hidden

" Enable mouse
"set mouse=a
" Don't show unnecessary messages when doing completion
set shortmess +=c

" Disable automatic continuation of comment to next line.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Use alt + hjkl to resize windows
nnoremap <M-j>    :resize -2<CR>
nnoremap <M-k>    :resize +2<CR>
nnoremap <M-h>    :vertical resize -2<CR>
nnoremap <M-l>    :vertical resize +2<CR>

" I hate escape more than anything else
inoremap jk <Esc>
inoremap kj <Esc>

" Easy CAPS
inoremap <c-u> <ESC>viwUi
nnoremap <c-u> viwU<Esc>

" TAB in general mode will move to text buffer
nnoremap <TAB> :bnext<CR>
" SHIFT-TAB will go back
nnoremap <S-TAB> :bprevious<CR>

" Selection stay for multiple indentation
vnoremap < <gv
vnoremap > >gv

" Persistant Undo
" YOU NEDD TO MKDIR MANUALLY.
set undofile                " Save undos after file closes
set undodir=~/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" Color Scheme
set background=dark
colorscheme palenight

" Fugitive CONFIGURATION
let g:airline_section_b = '%{FugitiveStatusline()}'

" NERDTree CONFIGURATION
" Custom Icon for nerdtree-git-plugin
let g:NERDTreeGitStatusIndicatorMapCustom = { 
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" Toggle NERDTree with <F5>
map <F5> :NERDTreeToggle<CR>

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$', 'venv', 'tags']

" For Markdown Preview

" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 1
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {}
    \ }

" Mapping for Markdown Preview
nmap <leader>mp <Plug>MarkdownPreview
nmap <leader>mps <Plug>MarkdownPreviewStop

" For vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_theme='simple'

" For sort-motion plugin
" To make all sorts case insensitive and remove duplicates
let g:sort_motion_flags = "ui"

" ##############################################################################
" DO WHAT PLUGIN DO WITH JUST VIM
" FINDING FILES:

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu

" NOW WE CAN:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy

" TAG JUMPING:

" Create the `tags` file (may need to install ctags first)
command! MakeTags AsyncRun ctags -R .

" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
"   ###################################################################
" For quickscope
" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

highlight QuickScopePrimary guifg='#00C7DF' gui=underline ctermfg=155 cterm=underline
highlight QuickScopeSecondary guifg='#afff5f' gui=underline ctermfg=81 cterm=underline

let g:qs_max_chars=150
"   ######################################################################
"   For rainbow
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

autocmd FileType * RainbowParentheses
"   #######################################################################
